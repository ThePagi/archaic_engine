// Generated by egui-themer (https://github.com/grantshandy/egui-themer).

use eframe::egui;

use egui::FontFamily::{Monospace, Proportional};
use egui::{
    epaint::Shadow,
    style::{Interaction, Margin, Selection, Spacing, WidgetVisuals, Widgets},
    Color32, FontData, FontDefinitions, FontId, FontTweak, Rounding, Stroke, Style, TextStyle,
    Vec2, Visuals,
};
pub fn style_dark() -> Style {
    Style {
        // override the text styles here:
        // override_text_style: Option<TextStyle>

        // override the font id here:
        // override_font_id: Option<FontId>

        // set your text styles here:
        // text_styles: BTreeMap<TextStyle, FontId>,
        /* DEFAULT:
        Small: FontId { size: 9.0, family: Proportional },
        Body: FontId { size: 12.5, family: Proportional },
        Monospace: FontId { size: 12.0, family: Monospace },
        Button: FontId { size: 12.5, family: Proportional },
        Heading: FontId { size: 18.0, family: Proportional }
         */
        text_styles: [
            (TextStyle::Heading, FontId::new(22.0, Proportional)),
            (TextStyle::Body, FontId::new(16.0, Proportional)),
            (TextStyle::Monospace, FontId::new(15.5, Monospace)),
            (TextStyle::Button, FontId::new(16.0, Proportional)),
            (TextStyle::Small, FontId::new(14.0, Proportional)),
        ]
        .into(),

        // set your drag value text style:
        // drag_value_text_style: TextStyle,
        spacing: Spacing {
            item_spacing: Vec2 { x: 4.0, y: 2.0 },
            window_margin: Margin {
                left: 8.0,
                right: 8.0,
                top: 8.0,
                bottom: 8.0,
            },
            button_padding: Vec2 { x: 8.0, y: 8.0 },
            menu_margin: Margin {
                left: 4.0,
                right: 4.0,
                top: 4.0,
                bottom: 4.0,
            },
            indent: 16.0,
            interact_size: Vec2 { x: 48.0, y: 32.0 },
            slider_width: 128.0,
            combo_width: 64.0,
            text_edit_width: 256.0,
            icon_width: 20.0,
            icon_width_inner: 12.0,
            icon_spacing: 4.0,
            tooltip_width: 600.0,
            indent_ends_with_horizontal_line: false,
            combo_height: 200.0,
            scroll_bar_width: 16.0,
            scroll_handle_min_length: 16.0,
            scroll_bar_inner_margin: 6.0,
            scroll_bar_outer_margin: 0.0,
        },
        interaction: Interaction {
            resize_grab_radius_side: 5.0,
            resize_grab_radius_corner: 16.0,
            show_tooltips_only_when_still: true,
        },
        visuals: Visuals {
            dark_mode: true,
            override_text_color: Some(Color32::from_rgb(180, 180, 180)),
            widgets: Widgets {
                noninteractive: WidgetVisuals {
                    bg_fill: Color32::from_rgba_premultiplied(27, 27, 27, 255),
                    weak_bg_fill: Color32::from_rgba_premultiplied(27, 27, 27, 255),
                    bg_stroke: Stroke {
                        width: 1.0,
                        color: Color32::from_rgba_premultiplied(51, 50, 50, 255),
                    },
                    rounding: Rounding {
                        nw: 0.0,
                        ne: 0.0,
                        sw: 0.0,
                        se: 0.0,
                    },
                    fg_stroke: Stroke {
                        width: 1.0,
                        color: Color32::from_rgba_premultiplied(140, 140, 140, 255),
                    },
                    expansion: 0.0,
                },
                inactive: WidgetVisuals {
                    bg_fill: Color32::from_rgba_premultiplied(50, 50, 50, 255),
                    weak_bg_fill: Color32::from_rgba_premultiplied(60, 60, 60, 255),
                    bg_stroke: Stroke {
                        width: 0.0,
                        color: Color32::from_rgba_premultiplied(0, 0, 0, 0),
                    },
                    rounding: Rounding {
                        nw: 0.0,
                        ne: 0.0,
                        sw: 0.0,
                        se: 0.0,
                    },
                    fg_stroke: Stroke {
                        width: 2.0,
                        color: Color32::from_rgba_premultiplied(180, 180, 180, 255),
                    },
                    expansion: 0.0,
                },
                hovered: WidgetVisuals {
                    bg_fill: Color32::from_rgba_premultiplied(70, 70, 70, 255),
                    weak_bg_fill: Color32::from_rgba_premultiplied(70, 70, 70, 255),
                    bg_stroke: Stroke {
                        width: 2.0,
                        color: Color32::from_rgba_premultiplied(113, 137, 187, 255),
                    },
                    rounding: Rounding {
                        nw: 0.0,
                        ne: 0.0,
                        sw: 0.0,
                        se: 0.0,
                    },
                    fg_stroke: Stroke {
                        width: 2.0,
                        color: Color32::from_rgba_premultiplied(151, 193, 221, 255),
                    },
                    expansion: 2.0,
                },
                active: WidgetVisuals {
                    bg_fill: Color32::from_rgba_premultiplied(55, 55, 55, 255),
                    weak_bg_fill: Color32::from_rgba_premultiplied(55, 55, 55, 255),
                    bg_stroke: Stroke {
                        width: 1.0,
                        color: Color32::from_rgba_premultiplied(182, 206, 255, 255),
                    },
                    rounding: Rounding {
                        nw: 0.0,
                        ne: 0.0,
                        sw: 0.0,
                        se: 0.0,
                    },
                    fg_stroke: Stroke {
                        width: 2.0,
                        color: Color32::from_rgba_premultiplied(188, 237, 255, 255),
                    },
                    expansion: 1.0,
                },
                open: WidgetVisuals {
                    bg_fill: Color32::from_rgba_premultiplied(27, 27, 27, 255),
                    weak_bg_fill: Color32::from_rgba_premultiplied(64, 64, 64, 255),
                    bg_stroke: Stroke {
                        width: 0.0,
                        color: Color32::from_rgba_premultiplied(60, 60, 60, 255),
                    },
                    rounding: Rounding {
                        nw: 0.0,
                        ne: 0.0,
                        sw: 0.0,
                        se: 0.0,
                    },
                    fg_stroke: Stroke {
                        width: 1.0,
                        color: Color32::from_rgba_premultiplied(210, 210, 210, 255),
                    },
                    expansion: 0.0,
                },
            },
            selection: Selection {
                bg_fill: Color32::from_rgba_premultiplied(87, 73, 141, 255),
                stroke: Stroke {
                    width: 2.0,
                    color: Color32::from_rgba_premultiplied(116, 134, 155, 149),
                },
            },
            hyperlink_color: Color32::from_rgba_premultiplied(190, 144, 227, 255),
            faint_bg_color: Color32::from_rgba_premultiplied(2, 2, 2, 0),
            extreme_bg_color: Color32::from_rgba_premultiplied(28, 28, 28, 255),
            code_bg_color: Color32::from_rgba_premultiplied(54, 66, 84, 255),
            warn_fg_color: Color32::from_rgba_premultiplied(255, 143, 0, 255),
            error_fg_color: Color32::from_rgba_premultiplied(255, 0, 0, 255),
            window_rounding: Rounding {
                nw: 0.0,
                ne: 0.0,
                sw: 0.0,
                se: 0.0,
            },
            window_shadow: Shadow {
                extrusion: 8.0,
                color: Color32::from_rgba_premultiplied(0, 0, 0, 124),
            },
            window_fill: Color32::from_rgba_premultiplied(24, 24, 24, 255),
            window_stroke: Stroke {
                width: 2.0,
                color: Color32::from_rgba_premultiplied(36, 36, 36, 255),
            },
            menu_rounding: Rounding {
                nw: 0.0,
                ne: 0.0,
                sw: 0.0,
                se: 0.0,
            },
            panel_fill: Color32::from_rgba_premultiplied(30, 30, 30, 255),
            popup_shadow: Shadow {
                extrusion: 8.0,
                color: Color32::from_rgba_premultiplied(0, 0, 0, 108),
            },
            resize_corner_size: 8.0,
            text_cursor_width: 2.0,
            text_cursor_preview: false,
            clip_rect_margin: 0.0,
            button_frame: true,
            collapsing_header_frame: true,
            indent_has_left_vline: true,
            striped: false,
            slider_trailing_fill: true,
        },
        animation_time: 0.0,
        explanation_tooltips: false,
        ..Default::default()
    }
}

pub fn load_fonts(cc: &eframe::CreationContext<'_>) {
    let mut fonts = FontDefinitions::empty();
    fonts.font_data.insert(
        "NotoSans".to_owned(),
        FontData::from_static(include_bytes!("../../fonts/NotoSans-Regular.ttf")),
    );
    fonts.font_data.insert(
        "NotoSansMono".to_owned(),
        FontData::from_static(include_bytes!("../../fonts/NotoSansMono-Regular.ttf")),
    );
    fonts.font_data.insert(
        "NotoSansSymbols".to_owned(),
        FontData::from_static(include_bytes!("../../fonts/NotoSansSymbols-Regular.ttf")).tweak(
            FontTweak {
                scale: 1.25,
                y_offset_factor: 0.0,
                y_offset: 0.0,
                baseline_offset_factor: 0.05,
            },
        ),
    );
    fonts.font_data.insert(
        "NotoSansSymbols2".to_owned(),
        FontData::from_static(include_bytes!("../../fonts/NotoSansSymbols2-Regular.ttf")).tweak(
            FontTweak {
                scale: 1.25,
                y_offset_factor: 0.0,
                y_offset: 0.0,
                baseline_offset_factor: 0.05,
            },
        ),
    );
    fonts.font_data.insert(
        "NotoEmoji".to_owned(),
        FontData::from_static(include_bytes!("../../fonts/NotoEmoji-Regular.ttf")).tweak(
            FontTweak {
                scale: 1.25,
                y_offset_factor: 0.0,
                y_offset: 0.0,
                baseline_offset_factor: 0.0,
            },
        ),
    );

    fonts
        .families
        .entry(Proportional)
        .or_default()
        .push("NotoSans".to_owned());
    fonts
        .families
        .entry(Proportional)
        .or_default()
        .push("NotoSansSymbols".to_owned());
    fonts
        .families
        .entry(Proportional)
        .or_default()
        .push("NotoSansSymbols2".to_owned());
    fonts
        .families
        .entry(Proportional)
        .or_default()
        .push("NotoEmoji".to_owned());

    fonts
        .families
        .entry(Monospace)
        .or_default()
        .push("NotoSansMono".to_owned());
    fonts
        .families
        .entry(Monospace)
        .or_default()
        .push("NotoSansSymbols".to_owned());
    fonts
        .families
        .entry(Monospace)
        .or_default()
        .push("NotoSansSymbols2".to_owned());
    fonts
        .families
        .entry(Monospace)
        .or_default()
        .push("NotoEmoji".to_owned());

    cc.egui_ctx.set_fonts(fonts);
}
